<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Apsara Bazaar-Profile</title>
  <link rel="stylesheet" href="/css/index.css" />
  <link rel="stylesheet" href="/css/add-index.css" />
  <link rel="stylesheet" href="/css/post-structure.css">
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
  <link rel="shortcut icon" href="/icons/logo.png" type="image/x-icon" />
  <style>
    .profile-head {
      margin-top: 60px;
      width: 100%;
      background: #202020;
      padding: 8px 0px;
      padding-bottom: 16px;
    }

    .ph-pic {
      margin-left: 8px;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }

    .p-pack {
      width: max-content;
      border-radius: 50px;
      height: 64px;
    }

    .ph-name {
      margin-top: 8px;
      font-size: 24px;
      margin-left: 8px;
      position: relative;
    }
    .ph-interactions {
      margin-top: 8px;
      font-size: 24px;
      margin-left: 8px;
      display: flex;
    }
    #follow-btn{
      font-size: 16px;
    color: white;
    background: transparent;
    border: 2px solid white;
    padding: 8px 12px;
    border-radius: 30px;
    }
    #edit-profile{
      font-size: 14px;
    color: white;
    background: transparent;
    border: 2px solid white;
    padding: 4px 6px;
    border-radius: 30px;
    display: flex
;
    position: absolute;
    right: 24px;
    bottom: 0px;
    }
    .chat{
      margin-right: 20px;
    border: 2px solid white;
    height: min-content;
    border-radius: 38px;
    padding: 0px 2px 0px 2px;
    max-width: 34px;
    max-height: 34px;
    margin-left: 8px;
    }

    .ph-username {
      margin-top: 8px;
      font-size: 16px;
      display: flex;
      justify-content: space-between;
      width: 90%;
      margin-left: 8px;
    }

    .profile-menu {
      --font-color-dark: #bebfc5;
      --font-color-light: #bebfc5;
      --bg-color: #212121;
      --main-color: #0c0c0c;
      --secondary-color: #141414;
      position: relative;
      width: 100%;
      height: 44px;
      background-color: var(--bg-color);
      display: flex;
      flex-direction: row;
      padding-bottom: 12px;
    }

    .option {
      margin-right: 5px;
      width: 50%;
      height: 40px;
      position: relative;
      top: 2px;
      left: 2px;
      border-radius: 34px;
      transition: 0.25s cubic-bezier(0, 0, 0, 1);
      font-size: 20px;
    }

    .option:last-child {
      margin-right: 4px;
    }

    .option:hover {
      background-color: var(--secondary-color);
    }

    .option:hover .span {
      color: var(--font-color-light);
    }

    .input {
      width: 100%;
      height: 100%;
      position: absolute;
      left: 0;
      top: 0;
      appearance: none;
      cursor: pointer;
    }

    .btn {
      width: 100%;
      height: 100%;
      border-radius: 50px;
      display: flex;
      justify-content: center;
      align-items: center;
    }

    .span {
      color: var(--font-color-dark);
    }

    .input:checked+.btn {
      background-color: var(--main-color);
      transition: 0.2s cubic-bezier(0, 0, 0, 1);
    }

    .input:checked+.btn .span {
      color: var(--font-color-light);
      transition: 0.25s cubic-bezier(0, 0, 0, 1);
    }

    .user-comment {
      padding: 16px;
     
      color: #bebfc5;
    }

    .user-comment-item {
      padding: 12px;
      margin-bottom: 10px;
      background-color: #141414;
      border-radius: 8px;
    }

    .user-comment-author {
      font-weight: bold;
      color: #ffffff;
    }

    .user-comment-body {
      margin: 8px 0;
    }

    .user-comment-reply {
      margin-left: 12px;
      padding: 4px 0;
      font-size: 14px;
    }

    .reply-username {
      font-weight: bold;
      color: white;
    }

    .content {
      margin-top: 0px;
    }
    #loadMoreButton {
    margin-left: calc(50% - 37.5px);
}

/* Form of Edit Style */
#edit-profile-container {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0,0,0,0.95);
  display: none;           /* Hidden by default */
  opacity: 0;             /* Transparent by default */
  transition: opacity 0.3s ease;
  z-index: 999;
}

.edit-profile-content {
  background: #101010;
    width: 500px;
    max-width: 90%;
    padding: 20px;
    position: relative;
    transform: translateY(-20px);
    transition: transform 0.3s ease;
    z-index: 100;
    margin-top: 20px;
}

.close-btn {
  position: absolute;
  top: 6px;
  right: 15px;
  cursor: pointer;
  font-size: 28px;
  background: transparent;
}

.icon-option {
  text-align: center;
}
.icon-option img{
  width: 50px;
  border-radius: 50%;
}

.locked {
  opacity: 0.5;
  cursor: not-allowed;
  position: relative;
}

.lock-indicator {
  color: #d00;
  position: absolute;
  top: 0;
  right: 0;
  font-size: 20px;
}
/* Title */
.edit-profile-content h2 {
  margin-bottom: 20px;
  padding-left: 12px;
}

/* Update options section */
#update-options {
  text-align: center;
  margin-bottom: 20px;
}

#update-options p {
  margin-bottom: 10px;
  font-size: 16px;
  font-weight: bold;
}

#update-options button {
  background: transparent;
    border: none;
    padding: 10px 15px;
    margin: 5px;
    border-radius: 4px;
    color: #fff;
    cursor: pointer;
    font-size: 14px;
    transition: background 0.8s ease;
    text-align: left;
    display: flex
;
    justify-content: space-between;
}

/* #update-options button:hover {
  background: #2980b9;
} */

/* Form elements */
#update-form label {
  display: block;
  margin-bottom: 6px;
  font-weight: bold;
}

#update-form input[type="text"],
#update-form input[type="password"] {
  width: 100%;
  padding: 10px;
  margin-bottom: 15px;
  border: none;
  border-radius: 4px;
  box-sizing: border-box;
}

/* Save button */
.save-btn {
  background: #27ae60;
  color: #fff;
  border: none;
  padding: 12px 15px;
  width: 100%;
  border-radius: 4px;
  cursor: pointer;
  font-size: 16px;
  transition: background 0.3s ease;
}

.save-btn:hover {
  background: #1e8449;
}

/* Icon list styling */
.icon-list {
  display: flex;
    flex-wrap: wrap;
    gap: 16px;
    margin: 10px;
}

.icon-option {
  text-align: center;
  position: relative;
}

.icon-option label {
  cursor: pointer;
  display: block;
  border: 2px solid transparent;
  border-radius: 4px;
  
  transition: border-color 0.3s ease;
}

.icon-option input[type="radio"] {
  display: none;
}

.icon-option img {
  max-width: 100%;
  border-radius: 4px;
  display: block;
}

/* Selected icon border */
.icon-option input[type="radio"]:checked + img {
  border: 2px solid #27ae60;
}

/* Locked icon styling */
.icon-option label.locked {
  opacity: 0.5;
  cursor: not-allowed;
}

.icon-option .lock-indicator {
  position: absolute;
  top: 12px;
  right: 12px;
  font-size: 18px;
  color: #e74c3c;
}

/* Responsive adjustments */
@media (max-width: 600px) {
  .edit-profile-content {
    width: 95%;
    padding: 15px;
  }
  #update-options button {
    width: 100%;
    margin: 5px 0;
  }
}
.content{
  background-color: transparent;
}




  </style>
</head>

<body>
  <nav class="nav">
    <div class="l-nav">&nbsp; Apsara Bazaar</div>
    <div class="r-nav">
      <% if (!user) { %>
      <div><a href="/auth/login">Login</a></div>
      <% } else { %>
      <div class="showmenu">
        <button class="add-post" onclick="window.location.href='/auth/create-post'">
          <img src="/icons/add.gif" alt="" width="44px" />
        </button>
        
      </div>
      <% } %>
    </div>
  </nav>
  <div class="profile-head">
    <div class="ph-pic">
      <div class="p-pack">
        <img src="/icons/avatars/avatar<%=profileuser.profilepic%>.jpg" alt="" style="width: 56px; padding: 8px;border-radius: 50%;" />
      </div>
      <span style="height: max-content;margin-right:24px;" ><%=profileuser.followers.length%> Followers</span>
      
    </div>
    <div class="ph-name">
      <h5><%=profileuser.name%><%=profileuser.badge%></h5>
      <span style="font-size: 16px;">@<%=profileuser.username%></span>
      <%if(user.username===profileuser.username) {%>
        <button id="edit-profile" onclick="showeditform(1)">  
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18px" >
            <path d="M20.7 5.2a1.024 1.024 0 0 1 0 1.448l-2.626 2.628-3.35-3.35L17.35 3.3a1.024 1.024 0 0 1 1.448 0zm-4.166 5.614-3.35-3.35-8.509 8.511L3 21l5.025-1.675z" fill="#ffffff" />
          </svg>
          Edit
        </button>
        <%}%>
    </div>
    
    <%if(user.username!=profileuser.username){%>
    <div class="ph-interactions">
        <div onclick="toggleFollow('<%=profileuser.username %>')">
          <button id="follow-btn">
            <% if (!user.following.includes(profileuser.username)) { %> 
              Follow
              <%}else{%>
                Following
             <% } %>
          </button>
        </div>
      <div class="chat">
        <button style="background: transparent;border: none;">
          <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 32 32" width="32px" >
            <g data-name="chat android app aplication phone">
      
              <path d="M16 8C9.93 8 5 11.59 5 16c0 2.43 1.45 4.66 4 6.18V25a1 1 0 0 0 1.55.83l3-2A15 15 0 0 0 16 24c6.07 0 11-3.59 11-8s-4.93-8-11-8zm0 14a13.6 13.6 0 0 1-2.44-.23 1 1 0 0 0-.74.15L11 23.13v-1.54a1 1 0 0 0-.53-.88C8.26 19.55 7 17.83 7 16c0-3.31 4-6 9-6s9 2.69 9 6-4 6-9 6z" fill="#ffffff" />
              <circle cx="16" cy="16" r="1"fill="#ffffff"/>
              <circle cx="20" cy="16" r="1"fill="#ffffff"/>
              <circle cx="12" cy="16" r="1"fill="#ffffff"/>
            </g></svg></button>
      </div>
    </div>
    <%}%>
  </div>
  <div class="profile-menu">
    <div class="option" onclick="loadMorePosts() , Show(1)">
      <input value="option1" name="btn" type="radio" class="input" />
      <div class="btn">
        <span class="span">Posts</span>
      </div>
    </div>
    <div class="option" onclick="fetchUserComments('<%=profileuser.username%>') ,Show(2)">
      <input value="option2" name="btn" type="radio" class="input" />
      <div class="btn">
        <span class="span">Comments</span>
      </div>
    </div>
  </div>
  <div class="content">
    
     <div id="up-wrapper" style="width: 100%;">
      <div class="user-posts post" id="u-post">  
        <div id="posts">

        </div>    
      </div>
     
     </div>
    
    

    <div class="user-comment" id="u-comment"></div>
  </div>

  <!-- Hidden Edit Profile Form -->
<div class="edit-profile-container" id="edit-profile-container">
  <div class="edit-profile-content">
    <!-- Close Button -->
    <span class="close-btn" id="close-edit-form" onclick="hideEditForm()">&times;</span>
    <h2>Edit Profile</h2>
  
    <!-- Options to choose what to update -->
    <div id="update-options">
      <button type="button" onclick="showSection('name')">Display Name  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18px" >
        <path d="M20.7 5.2a1.024 1.024 0 0 1 0 1.448l-2.626 2.628-3.35-3.35L17.35 3.3a1.024 1.024 0 0 1 1.448 0zm-4.166 5.614-3.35-3.35-8.509 8.511L3 21l5.025-1.675z" fill="#ffffff" />
      </svg></button>
      <button type="button" onclick="showSection('password')">Password  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18px" >
        <path d="M20.7 5.2a1.024 1.024 0 0 1 0 1.448l-2.626 2.628-3.35-3.35L17.35 3.3a1.024 1.024 0 0 1 1.448 0zm-4.166 5.614-3.35-3.35-8.509 8.511L3 21l5.025-1.675z" fill="#ffffff" />
      </svg></button>
      <button type="button" onclick="showSection('icon')">Profile Icon  <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="18px" >
        <path d="M20.7 5.2a1.024 1.024 0 0 1 0 1.448l-2.626 2.628-3.35-3.35L17.35 3.3a1.024 1.024 0 0 1 1.448 0zm-4.166 5.614-3.35-3.35-8.509 8.511L3 21l5.025-1.675z" fill="#ffffff" />
      </svg></button>
    </div>
  
    <!-- Update Form (no action attribute so that JS handles submission) -->
    <form id="update-form">
      <!-- Name Section -->
      <div id="name-section" class="update-section" style="display:none;">
        <label for="name">Display Name:</label>
        <input 
          type="text" 
          name="name" 
          id="name" 
          value="<%= user ? user.name : '' %>" 
        />
         <!-- Save Button -->
      <button type="submit" class="save-btn">Save Changes</button>
      </div>
  
      <!-- Password Section -->
      <div id="password-section" class="update-section" style="display:none;">
        <label for="currentPassword">Current Password:</label>
        <input 
          type="password" 
          name="currentPassword" 
          id="currentPassword" 
        />
        <label for="newPassword">New Password:</label>
        <input 
          type="password" 
          name="newPassword" 
          id="newPassword"
          placeholder="Leave blank to keep the same"
        />
         <!-- Save Button -->
      <button type="submit" class="save-btn">Save Changes</button>
      </div>
  
      <!-- Profile Icon Section -->
      <div id="icon-section" class="update-section" style="display:none;">
        <label>Choose Profile Icon:</label>
        <div class="icon-list">
          <% 
            // Example icons array
            const allIcons = [
              { src: "/icons/avatars/avatar1.jpg", requiredRank: "Fapper" },
              { src: "/icons/avatars/avatar2.jpg", requiredRank: "Fapper" },
              { src: "/icons/avatars/avatar3.jpg", requiredRank: "Fapper" },
              { src: "/icons/avatars/avatar4.jpg", requiredRank: "Fapper" },
              { src: "/icons/avatars/avatar5.jpg", requiredRank: "Fapper" },
              { src: "/icons/avatars/avatar6.jpg", requiredRank: "Fapper" },
              { src: "/icons/avatars/avatar7.jpg", requiredRank: "Gold Member" },
              { src: "/icons/avatars/avatar8.jpg", requiredRank: "Gold Member" },
              { src: "/icons/avatars/avatar9.jpg", requiredRank: "Moderator" },
              { src: "/icons/avatars/avatar10.jpg", requiredRank: "Moderator" },
            ];
  
            // The user’s current rank (defaulting to 'Fapper')
            const currentRank = profileuser.rank || "Fapper";
  
            allIcons.forEach(icon => {
              // Check if the user is allowed to pick this icon
              let isLocked = false;
              if (icon.requiredRank === "Moderator" && currentRank !== "Moderator" && currentRank !== "Admin") {
                isLocked = true;
              } else if (icon.requiredRank === "Gold Member" && currentRank !== "Gold Member" && currentRank !== "Moderator" && currentRank !== "Admin") {
                isLocked = true;
              }
          %>
            <div class="icon-option">
              <label 
                class="<%= isLocked ? 'locked' : '' %>"
                title="<%= isLocked ? 'Locked for your rank' : 'Available' %>"
              >
                <input 
                  type="radio" 
                  name="profileIcon" 
                  value="<%= icon.src %>"
                  <%= isLocked ? 'disabled' : '' %>
                  <%= user && user.profileIcon === icon.src ? 'checked' : '' %>
                />
                <img src="<%= icon.src %>" alt="icon" />
                <% if (isLocked) { %>
                  <span class="lock-indicator">&#128274;</span>
                <% } %>
              </label>
            </div>
          <% }); %>
        </div>
         <!-- Save Button -->
      <button type="submit" class="save-btn">Save Changes</button>
      </div>
  
     
    </form>
  </div>
</div>




  
    <!-- Full-Screen Image Display (simplified) -->
    <div id="fullScreenImageContainer" class="image-overlay" onclick="closeFullscreenMedia()">
      <img id="fullScreenImage" src="" alt="Full screen view" />
    </div>

    <%- include('components/footer-structure') %>
    <%- include('components/loader') %>
    <%- include('components/setupjs') %>

    <script src="/js/post-call.js"></script>
    <script src="/js/posts-features.js"></script>
  <script>
let username = "<%=profileuser.username%>";


    function Show(a){
      if(a===1){
        let b=document.getElementById("up-wrapper");
        b.style.display="block";
        let c=document.getElementById("u-comment");
        c.style.display="none";
              
      }
      else{
        let b=document.getElementById("up-wrapper");
        b.style.display="none";
        let c=document.getElementById("u-comment");
        c.style.display="block";

      }
    }
    
   

   
    async function loadMorePosts() {
      fetchAndRenderPosts(currentTag);
    }
    
    async function fetchAndRenderPosts(tag = "") {
  if (isLoading) return;
  isLoading = true;

  // Cancel any previous request and create a new abort controller
  abortController.abort();
  abortController = new AbortController();

  try {
    console.log("0");
    const response = await fetch("/user/posts", {
      signal: abortController.signal,
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            username,
            skipCount,
            limit:10
          }),
        });


    if (!response.ok) throw new Error("Failed to fetch posts");

    const data = await response.json();
    console.log(data);

    // Sort posts by creation date in descending order
    data.posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    // Hide loading message (if present)
    const loadingMessage = document.getElementById("loadingMessage");
    if (loadingMessage) loadingMessage.style.display = "none";
    console.log("1");
    // Render each post
    data.posts.forEach(post => {
      postsContainer.appendChild(renderPost(post));
    });
    console.log("2");
  
    // Loop through each post and add the author badge
    data.posts.forEach(async post => {
       await AddAuthorBadge(post.author, post._id);
     });
     console.log("3")


    // Update skip count and manage the load more button
    skipCount += data.posts.length;
    manageLoadMoreButton(data.posts.length);
  } catch (error) {
    // Ignore abort errors; for other errors, log and display an error message
    if (error.name !== "AbortError") {
      console.error("Error fetching posts:", error);
      postsContainer.innerHTML = "<p>Failed to load posts. Please try again later.</p>";
    }
  } finally {
    isLoading = false;
    document.getElementById('loading-overlay').style.display = 'none';
  }
}

async function fetchUserComments(username) {
  try {
    // Fetch user comments from the API
    const response = await fetch("/user/comments", {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
      },
      body: JSON.stringify({ username }),
    });

    if (!response.ok) {
      throw new Error(`Error: ${response.statusText}`);
    }

    const threads = await response.json(); // This is an array of commentThread documents

    const commentSection = document.querySelector(".user-comment");
    commentSection.innerHTML = ""; // Clear existing comments

    threads.forEach((thread) => {
      thread.comments.forEach((comment) => {
        // Match top-level comment
        if (comment.author === username) {
          const commentDiv = document.createElement("div");
          commentDiv.classList.add("user-comment-item");
          commentDiv.onclick = () => OpenPostComments(`${thread.postId}`);
          commentDiv.innerHTML = `
            <div class="user-comment-author">${comment.author}</div>
            <div class="user-comment-body">${comment.body}</div>
          `;
          commentSection.appendChild(commentDiv);
        }

        // Match replies
        comment.replies?.forEach((reply) => {
          if (reply.author === username) {
            const replyDiv = document.createElement("div");
            replyDiv.classList.add("user-comment-item");
            replyDiv.onclick = () => OpenPostComments(`${thread.postId}`);
            replyDiv.innerHTML = `
              <div class="user-comment-author">${reply.author}</div>
              <div class="user-comment-body">${reply.body}</div>
              <div class="user-comment-meta">(as a reply to: ${comment.body})</div>
            `;
            commentSection.appendChild(replyDiv);
          }

          // Match superReplies
          reply.superReplies?.forEach((superReply) => {
            if (superReply.author === username) {
              const superReplyDiv = document.createElement("div");
              superReplyDiv.classList.add("user-comment-item");
              superReplyDiv.onclick = () => OpenPostComments(`${thread.postId}`);
              superReplyDiv.innerHTML = `
                <div class="user-comment-author">${superReply.author}</div>
                <div class="user-comment-body">${superReply.body}</div>
                <div class="user-comment-meta">(in a sub-reply to: ${reply.body})</div>
              `;
              commentSection.appendChild(superReplyDiv);
            }
          });
        });
      });
    });
  } catch (error) {
    console.error("Error fetching comments:", error);
  }
}

    function OpenPostComments(postId){
        window.location.href=`/post/comments/${postId}`
      }

      function InitializeFooter(){
      document.getElementById('home-btn').addEventListener('click', function() {
    // Show the loading overlay
    document.getElementById('loading-overlay').style.display = 'flex';
    setTimeout(function() {
      window.location.href = '/';
    }, 750);  // 100ms delay so the overlay appears
  });

  document.getElementById('chat-btn').addEventListener('click', function() {
    // Show the loading overlay
    document.getElementById('loading-overlay').style.display = 'flex';
    setTimeout(function() {
      window.location.href = '/chats';
    }, 750);  // 100ms delay so the overlay appears
  });
    }
    
     /* =======================
       Like and Comment Handlers
    ======================= */
    function addLike(postId) {
      const likesElem = document.getElementById(`like-count-${postId}`);
      const likeIconElem = document.getElementById(`like-icon-${postId}`);
      let currentLikes = parseInt(likesElem.innerHTML, 10) || 0;
      if (isLoggedIn) {
        // Optimistically update the UI
        likesElem.innerHTML = currentLikes + 1;
        likeIconElem.src = "/icons/liked.png";
      }
      fetch(`/post/addlike/${postId}`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' }
      })
        .then(response =>
          response.json().then(data => ({ status: response.status, body: data }))
        )
        .then(({ status, body }) => {
          if (status === 200) {
            // Like successfully added
            likeIconElem.src = "/icons/liked.png";
          } else if (status === 401) {
            window.location.href = "/auth/login";
          } else if (status === 400) {
            alert(body.message || 'You have already liked this post.');
          } else {
            console.error('Unexpected error:', body);
            alert('An error occurred while adding the like.');
          }
        })
        .catch(error => console.error('Error:', error));
    }
  
    function fetchComments(postId) {
      document.getElementById('loading-overlay').style.display = 'flex';
      fetch(`/post/comments/${postId}`, {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' }
      })
        .then(response => {
          if (response.status === 401) {
            window.location.href = "/auth/login";
            return;
          } else if (response.status === 404) {
            alert("Post not found.");
            return;
          } else if (!response.ok) {
            alert("An error occurred while fetching comments.");
            return;
          }
          window.location.href = `/post/comments/${postId}`;
        })
        .catch(error => console.error('Error:', error));
    }
  

    InitializeFooter();

    document.addEventListener("DOMContentLoaded", function() {
      if(!document.querySelector(".chat button")){
         return;
      }
    document.querySelector(".chat button").addEventListener("click", async function() {
        if (!username) return;
        document.getElementById('loading-overlay').style.display = 'flex';
    setTimeout(function() {
      console.log("loader")
    }, 750);

        try {
            const response = await fetch("/rooms/join", {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ username })
            });

            const data = await response.json();
            if (data.success) {
                if (data.room) {
                    // If room exists, redirect to chat
                    window.location.href = `/rooms/chat?username=${data.username}&name=${data.name}&roomCode=${data.roomCode}&roomName=${data.roomName}`;
                } else {
                    alert(data.message);
                }
            } else {
                alert(data.error);
            }
        } catch (err) {
            console.error("Error joining chat:", err);
        }
    });
});


document.addEventListener("DOMContentLoaded", () => {
    const editProfileBtn = document.getElementById("edit-profile-btn");
    const editProfileContainer = document.getElementById("edit-profile-container");
    const closeEditFormBtn = document.getElementById("close-edit-form");

    if (editProfileBtn) {
      editProfileBtn.addEventListener("click", () => {
        editProfileContainer.classList.add("active");
        document.getElementById("edit-profile-container").style.display="flex"
      });
    }

    if (closeEditFormBtn) {
      closeEditFormBtn.addEventListener("click", () => {
        editProfileContainer.classList.remove("active");
      });
    }
  });

  async function showeditform(n) {
    
      document.getElementById("edit-profile-container").style.display="block";
     document.getElementById("edit-profile-container").style.opacity="1"
  }

   // Hide the edit form (implement as needed)
   function hideEditForm() {
    document.getElementById("edit-profile-container").style.display="none";
     document.getElementById("edit-profile-container").style.opacity="0"
  }

  // Show the selected section and hide the others
  function showSection(section) {
    // Hide all update sections
    document.querySelectorAll('.update-section').forEach(function(sec) {
      sec.style.display = 'none';
    });
    // Display the chosen section
    document.getElementById(section + '-section').style.display = 'block';
  }

  // Intercept the form submission and send via JavaScript (AJAX)
  document.getElementById('update-form').addEventListener('submit', function(e) {
    e.preventDefault(); // Prevent default POST behavior

    // Gather the data from the visible section(s)
    const formData = new FormData(this);
    // Create a plain object for sending as JSON
    const data = {};
    formData.forEach((value, key) => {
      data[key] = value;
    });

    fetch('/update-profile', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json'
  },
  body: JSON.stringify(data)
})
.then(response => response.json()) // First parse response JSON
.then(result => {
  if (result.error) {
    alert(result.error); // Show error alert
  } else {
    // alert('Profile updated successfully');
    hideEditForm(); // Hide form on success
    location.reload(); // Reload the page after update
  }
})
.catch(error => {
  console.error('Error:', error);
  alert('An unexpected error occurred. Please try again.');
});


   
  });




  </script>
</body>

</html>