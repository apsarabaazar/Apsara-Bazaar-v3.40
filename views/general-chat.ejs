<!DOCTYPE html>
<html>
  <head>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <meta charset="UTF-8" />

    <!-- <link rel="manifest" href="/manifest.json"> -->
    <title>Apsara Bazaar-ChatRoom</title>
    <link rel="shortcut icon" href="/icons/logo.png" type="image/x-icon">
    <link rel="stylesheet" href="/css/chatting.css" />
    <style>
      @import url("https://fonts.googleapis.com/css2?family=Bitter:ital,wght@0,100..900;1,100..900&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Satisfy&display=swap");
      @media screen and (max-width: 400px) {
        .chat-container {
          width: 100%;
          height: 100vh;
          border: none;
        }
      }
      .detail-popup {
        width: 72%;
        position: absolute;
        z-index: 10;
        color: white;
        display: none;
        top: 54px;
      }
      #messages li.other-message {
        background-color: #212121;
        color: white;
        justify-content: flex-start;
        align-self: flex-start;
        margin-left: 4px;
        margin-bottom: 4px;
        padding-top: 24px;
        padding-bottom: 10px;
        min-width: 65px;
        position: relative;
        font-family: Roboto;
      }
      .m-time {
        position: absolute;
        font-size: 12px;
        bottom: 2px;
        right: 6px;
        opacity: 0.8;
      }
      span {
        margin-right: 76px;
        padding-left: 8px;
      }

      .other-message span {
        margin-right: 84px;
      }

      .sender-name {
        color: #b94b41;
        width: max-content;
        position: absolute;
        top: 4px;
        left: 8px;
        font-size: 14px;
      }
    </style>
    <meta name="name" content="<%= name %>" />
    <meta name="username" content="<%= username %>" />
    <meta name="room-code" content="<%= roomCode %>" />
    <meta name="room-name" content="<%= roomName %>" />
  </head>

  <body>
    <div class="chat-container">
      <div class="chat-head" onclick="showdetails()">
        <div class="logo">
          <img src="/icons/profile.gif" alt="" width="32px" />
        </div>
        <div class="details">
          <div class="name">General Chat Room</div>

          <div class="online-users"></div>
        </div>
        <div class="right-head">
          <div class="room-c"></div>
        </div>
      </div>

      <div class="message-container">
        <ul id="messages">
          <!-- Messages will be dynamically added here -->
        </ul>
      </div>

      <form id="form" action="" enctype="multipart/form-data">
        <input id="input" autocomplete="off" placeholder="Message" />
        <button type="submit">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            viewBox="0 0 64 64"
            width="30px"
          >
            <g data-name="07-Send">
              <path
                style="fill: #2934a3"
                d="m1 1 15 31L1 63v-9l10-22L1 11V1z"
              />
              <path style="fill: #01a3ec" d="M63 32 1 63l15-31h47z" />
              <path style="fill: #01c1ff" d="M63 32H16L1 1l62 31z" />
              <path style="fill: #006cbf" d="m1 11 10 21h5L1 1v10z" />
              <path
                style="fill: #1c69a1"
                d="m1 1 15 31L1 63v-9l10-22L1 11V1z"
              />
              <path style="fill: #48befd" d="M63 32 1 63l15-31h47z" />
              <path style="fill: #6bdcff" d="M63 32H16L1 1l62 31z" />
              <path style="fill: #2a84c9" d="m1 11 10 21h5L1 1v10z" />
              <path
                style="
                  fill: none;
                  stroke: #000;
                  stroke-linejoin: round;
                  stroke-width: 2px;
                "
                d="M49 39 1 63l15-31L1 1l10 5M13 7l50 25-12 6M25 32h38M21 32h2M16 32h3"
              />
              <path
                style="
                  fill: none;
                  stroke: #000;
                  stroke-linejoin: round;
                  stroke-width: 2px;
                "
                d="M1 1v10l10 21L1 54v9"
              />
            </g>
          </svg>
        </button>
      </form>
    </div>

    <script src="/socket.io/socket.io.js"></script>
    <script>

      function OpenProfile(user){
        window.location.href=`/user/profile/${user}`
      }

      document.addEventListener("DOMContentLoaded", () => {
        const socket = io();

        const name = document
          .querySelector('meta[name="name"]')
          .getAttribute("content");
        const username = document
          .querySelector('meta[name="username"]')
          .getAttribute("content");
        const roomCode = document
          .querySelector('meta[name="room-code"]')
          .getAttribute("content");

        if (!username || !roomCode) {
          console.error("Username or room code not found in meta tags.");
          return;
        }

        socket.emit("join room", { username, roomCode });

        socket.on("update users", (users) => {
          const onlineUserDiv = document.querySelector(".online-users");
          if (onlineUserDiv) {
            onlineUserDiv.innerHTML = "";

            const header = document.createElement("div");
            header.innerHTML = `<div class="active-user-logo"></div> `;
            onlineUserDiv.appendChild(header);

            const userList = document.createElement("div");
            userList.className = "user-list";

            // Extract first names
            const displayNames = users.map((user) => {
              const firstName = user.split(" ")[0]; // Get first part of the name
              return firstName === username.split(" ")[0]
                ? name.split(" ")[0]
                : firstName;
            });

            userList.textContent = displayNames.join(", ");
            onlineUserDiv.appendChild(userList);
          } else {
            console.error('Element with class "online-users" not found.');
          }
        });

        let lastDate = null;

        socket.on("message history", (messages) => {
          console.log("Message history received:", messages);
          messages.forEach((message) => {
            const messageDate = extractDateFromTimestamp(message.timestamp);
            if (lastDate !== messageDate) {
              addDateLog(messageDate);
              lastDate = messageDate;
            }
            addMessage(
              message._id,
              message.user,
              message.name,
              message.msg,
              new Date(message.timestamp)
            );
          });
        });

        socket.on("chat message", (data) => {
          console.log("Incoming message:", data);
          const messageDate = extractDateFromTimestamp(data.timestamp);

          addMessage(
            data._id,
            data.user,
            data.name,
            data.msg,
            new Date(data.timestamp),
            data.image
          );
        });

        // Define an array of 5 colors (feel free to adjust these)
        const nameColors = [
          "#b94b41",
          "#4287f5",
          "#42f54e",
          "#f5e642",
          "#b54b64"
        ];

        // Helper function that computes a hash from a string and returns a color from the list
        function getColorForName(name) {
          let hash = 0;
          for (let i = 0; i < name.length; i++) {
            hash = name.charCodeAt(i) + ((hash << 5) - hash);
          }
          const index = Math.abs(hash) % nameColors.length;
          return nameColors[index];
        }

        function addMessage(id, user, name, msg, timestamp, media) {
          const item = document.createElement("li");
          item.className = user === username ? "user-message" : "other-message";
          item.dataset.id = id;
         

          if (msg) {
            const isImage = /\.(png|jpg|jpeg)$/.test(msg);
            const isVideo = /\.(mp4|webm|ogg)$/.test(msg);
            if (isImage) {
              const imageElement = document.createElement("img");
              imageElement.src = msg;
              imageElement.className = "chat-image";
              imageElement.loading = "lazy";
              item.appendChild(imageElement);
              imageElement.addEventListener("click", () => {
                openFullPageImage(msg);
              });
            } else if (isVideo) {
              const videoElement = document.createElement("video");
              videoElement.src = msg;
              videoElement.className = "chat-video";
              videoElement.controls = true;
              videoElement.loading = "lazy";
              item.appendChild(videoElement);
              item.classList.add("video-view");
              videoElement.addEventListener("click", () => {
                openFullPageVideo(msg);
              });
            } else {
              const messageText = document.createElement("span");
              if (msg.length > 28) {
                messageText.style.width = "100%";
                messageText.style.marginRight = "12px";
                messageText.style.paddingBottom = "6px";
              }
              // For other user messages, display the sender name with the color
              if (item.className === "other-message") {
                const nameElement = document.createElement("p");
                nameElement.className = "sender-name";
                nameElement.textContent = name;
                nameElement.onclick = () => OpenProfile(user);
                // Apply a color based on the sender's name
                nameElement.style.color = getColorForName(name);
                item.appendChild(nameElement);
               
              }
              messageText.textContent = msg;
              item.appendChild(messageText);
            }
          }

          const timeElement = document.createElement("p");
          timeElement.className = "m-time";
          const timeString = getFormattedTime(timestamp);
          timeElement.textContent = timeString;
          item.appendChild(timeElement);

          const messagesContainer = document.getElementById("messages");
          if (messagesContainer) {
            messagesContainer.appendChild(item);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
          } else {
            console.error('Element with ID "messages" not found.');
          }

          let holdTimeout;

          function showDeleteConfirmation() {
            const deleteConfirmed = confirm(
              "Do you want to delete this message?"
            );
            if (deleteConfirmed) {
              deleteMessage(id, msg);
            }
          }

          // item.addEventListener("mousedown", () => {
          //   holdTimeout = setTimeout(showDeleteConfirmation, 750);
          // });
          item.addEventListener("mouseup", () => {
            clearTimeout(holdTimeout);
          });
          item.addEventListener("mouseleave", () => {
            clearTimeout(holdTimeout);
          });
          // item.addEventListener("touchstart", () => {
          //   holdTimeout = setTimeout(showDeleteConfirmation, 750);
          // });
          item.addEventListener("touchend", () => {
            clearTimeout(holdTimeout);
          });
          item.addEventListener("touchmove", () => {
            clearTimeout(holdTimeout);
          });
        }

        function deleteMessage(id, mediaUrl) {
          fetch(
            `/delete-message/${id}?mediaUrl=${encodeURIComponent(mediaUrl)}`,
            {
              method: "DELETE",
            }
          )
            .then((response) => response.json())
            .then((data) => {
              if (data.success) {
                const messageItem = document.querySelector(
                  `li[data-id="${id}"]`
                );
                if (messageItem) {
                  messageItem.remove();
                }
              } else {
                console.error("Error deleting message:", data.error);
              }
            })
            .catch((error) => {
              console.error("Error deleting message:", error);
            });
        }

        function extractDateFromTimestamp(timestamp) {
    const date = new Date(timestamp);
    return date.toUTCString().split(' ').slice(1, 3).join(' ').toUpperCase(); 
}

        function getFormattedTime(date) {
          let hours = date.getUTCHours();
          const minutes = date.getUTCMinutes();
          const ampm = hours >= 12 ? "PM" : "AM";
          hours = hours % 12;
          hours = hours ? hours : 12;
          const minutesStr = minutes < 10 ? "0" + minutes : minutes;
          return hours + ":" + minutesStr + " " + ampm;
        }

        function addDateLog(date) {
          const item = document.createElement("li");
          item.className = "date-log";
          item.textContent = date;
          const messagesContainer = document.getElementById("messages");
          if (messagesContainer) {
            messagesContainer.appendChild(item);
          } else {
            console.error('Element with ID "messages" not found.');
          }
        }

        document.getElementById("form").addEventListener("submit", (event) => {
          event.preventDefault();
          const input = document.getElementById("input");

          if (input.value) {
            console.log(input.value);
            fetch("/send-message", {
              method: "POST",
              headers: {
                "Content-Type": "application/json", // Add this line
              },
              body: JSON.stringify({
                message: document.getElementById("input").value,
                user: username,
                name: name,
                roomCode: roomCode,
              }),
            })
              .then((response) => {
                if (!response.ok) {
                  throw new Error("Network response was not ok");
                }
                return response.json();
              })
              .then((data) => {
                if (data.success) {
                  const messageDate = extractDateFromTimestamp(
                    new Date().toISOString()
                  );
                  if (lastDate !== messageDate) {
                    lastDate = messageDate;
                  }
                  socket.emit("chat message", {
                    _id: data._id,
                    user: username,
                    msg: input.value,
                    timestamp: new Date().toISOString(),
                    roomCode,
                  });
                  input.value = "";
                } else {
                  console.error("Error sending message:", data.error);
                }
              })
              .catch((error) => {
                console.error("Error sending message:", error);
              });
          }
        });
      });

      if ("serviceWorker" in navigator) {
        window.addEventListener("load", () => {
          navigator.serviceWorker
            .register("/service-worker.js")
            .then((registration) => {
              console.log(
                "Service Worker registered with scope:",
                registration.scope
              );
            })
            .catch((error) => {
              console.log("Service Worker registration failed:", error);
            });
        });
      }
    </script>
  </body>
</html>
