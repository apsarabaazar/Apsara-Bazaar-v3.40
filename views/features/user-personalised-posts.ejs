<!DOCTYPE html>
<html lang="en">

<head>
  <title>Liked Posts</title>
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link rel="stylesheet" href="/css/post-structure.css">
  <!-- <link rel="stylesheet" href="/css/index.css">
  <link rel="stylesheet" href="/css/add-index.css"> -->
  <link href="https://fonts.googleapis.com/icon?family=Material+Icons" rel="stylesheet" />
  <style>
    @import url('https://fonts.googleapis.com/css2?family=Bitter:ital,wght@0,100..900;1,100..900&family=Playfair+Display:ital,wght@0,400..900;1,400..900&family=Satisfy&display=swap');

    * {
      margin: 0;
      padding: 0;
    }

    body {
      display: flex;
      --color: rgba(114, 114, 114, 0.3);
    background-color: #0e1113;
    background-image: linear-gradient(0deg, transparent 24%, var(--color) 25%, var(--color) 26%, transparent 27%, transparent 74%, var(--color) 75%, var(--color) 76%, transparent 77%, transparent), linear-gradient(90deg, transparent 24%, var(--color) 25%, var(--color) 26%, transparent 27%, transparent 74%, var(--color) 75%, var(--color) 76%, transparent 77%, transparent);
    background-size: 55px 55px;
    font-family: Bitter;
    }

    /* loader */
    #loading-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100vw;
      height: 100vh;
      background: rgba(0, 0, 0, 0.7);
      z-index: 9999;
      color: #fff;
      font-size: 1.5rem;
      align-items: center;
      justify-content: center;
    }

    /* From Uiverse.io by Lmickk2 */
    .loader {
      display: flex;
      transition: all 0.4s;
    }

    .loader div {
      margin-left: 0.8rem;
      background-color: rgb(34, 34, 34);
      box-shadow: inset 2px 2px 10px black;
      border-radius: 100%;
      height: 1rem;
      width: 1rem;
    }

    .box-load1 {
      animation: brighten 1.2s infinite;
    }

    .box-load2 {
      animation: brighten 1.2s infinite;
      animation-delay: .2s;
    }

    .box-load3 {
      animation: brighten 1.2s infinite;
      animation-delay: .4s;
    }

    @keyframes brighten {
      100% {
        background-color: rgb(165, 165, 165);
        box-shadow: none;
      }
    }

    nav {
      display: flex;
      background-color: #0e1113;
      width: 100%;
      height: 60px;
      color: white;
      position: fixed;
      z-index: 10;
      align-items: center;
      gap: 10px;
      padding-left: 26px;
    }

    .content {
      display: flex;
      flex-wrap: wrap;
      width: 100%;
      height: auto;
      background-color: #202020;
      align-items: center;
      justify-content: center;
      position: relative;
      flex-direction: column;
      margin-top: 60px;
      padding-bottom: 10px;
    }
  </style>
</head>

<body>
  <nav>
    <svg xmlns="http://www.w3.org/2000/svg" width="22.769" height="14.821" onclick="window.location.href='/'">
      <path d="M10.212 12.007 7.645 9.414h15.124v-4H7.62l2.585-2.586L7.377 0 0 7.378l7.37 7.443 2.842-2.814z" fill="#ffffff" />
    </svg>
    <h2> <%=type%> </h2>
  </nav>


  <div id="posts" class="content">

  </div>

  <!-- Full-Screen Image Display (simplified) -->
  <div id="fullScreenImageContainer" class="image-overlay" onclick="closeFullscreenMedia()">
    <img id="fullScreenImage" src="" alt="Full screen view" />
  </div>

  <div id="loading-overlay">
    <div class="loader">
      <div class="box-load1"></div>
      <div class="box-load2"></div>
      <div class="box-load3"></div>
    </div>
  </div>

  <%
 function timeAgo(isoDate) {
    const timeUnits = [
      { label: "year", seconds: 31536000 },
      { label: "month", seconds: 2592000 },
      { label: "day", seconds: 86400 },
      { label: "hour", seconds: 3600 },
      { label: "minute", seconds: 60 }
    ];
    const now = new Date();
    const past = new Date(isoDate);
    const diffInSeconds = Math.floor((now - past) / 1000);
    for (let unit of timeUnits) {
      const interval = Math.floor(diffInSeconds / unit.seconds);
      if (interval >= 1) {
        return `${interval} ${unit.label}${interval > 1 ? "s" : ""} ago`;
      }
    }
    return "just now";
  }
    %>
    <%- include('../components/setupjs') %>

   


<script src="/js/post-call.js"></script>
<script src="/js/posts-features.js"></script>


  <script>
    let type = "<%=type%>"
    

    if (type === "Liked") {
      document.addEventListener("DOMContentLoaded", fetchLikedPosts);
    } else if (type === "Saved") {
      document.addEventListener("DOMContentLoaded", fetchSavedPosts);
    }

    window.addEventListener('pageshow', function(event) {
    // If the page was loaded from the bfcache, event.persisted will be true
    if (event.persisted) {
      document.getElementById('loading-overlay').style.display = 'none';
    }
  });

  async function fetchAndRenderPosts(currentTag){
    if (type === "Liked") {
     fetchLikedPosts(currentTag)
    } else if (type === "Saved") {
     fetchSavedPosts(currentTag);;
    }
  }

   
      // Fetch and render posts
async function fetchLikedPosts(tag = "") {
  if (isLoading) return;
  isLoading = true;

  // Cancel any previous request and create a new abort controller
  abortController.abort();
  abortController = new AbortController();

  try {
    console.log("0");
    // Fetch posts from the API using the current skipCount and abort signal
    const response = await fetch(`/user/liked-posts/posts?skip=${skipCount}&limit=10`, {
      signal: abortController.signal,
    });
    if (!response.ok) throw new Error("Failed to fetch posts");

    const data = await response.json();
    console.log(data);

    // Sort posts by creation date in descending order
    data.posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    // Hide loading message (if present)
    const loadingMessage = document.getElementById("loadingMessage");
    if (loadingMessage) loadingMessage.style.display = "none";
    console.log("2");

    // Render each post
    data.posts.forEach(post => {
      postsContainer.appendChild(renderPost(post));
    });
    console.log("3");

    // Update skip count and manage the load more button
    skipCount += data.posts.length;
    manageLoadMoreButton(data.posts.length);
  } catch (error) {
    // Ignore abort errors; for other errors, log and display an error message
    if (error.name !== "AbortError") {
      console.error("Error fetching posts:", error);
      postsContainer.innerHTML = "<p>Failed to load posts. Please try again later.</p>";
    }
  } finally {
    isLoading = false;
    document.getElementById('loading-overlay').style.display = 'none';
  }
}

async function fetchSavedPosts(tag = "") {
  if (isLoading) return;
  isLoading = true;

  // Cancel any previous request and create a new abort controller
  abortController.abort();
  abortController = new AbortController();

  try {
    console.log("0");
    // Fetch posts from the API using the current skipCount and abort signal
    const response = await fetch(`/user/saved-posts/posts?skip=${skipCount}&limit=10`, {
      signal: abortController.signal,
    });
    if (!response.ok) throw new Error("Failed to fetch posts");

    const data = await response.json();
    console.log(data);

    // Sort posts by creation date in descending order
    data.posts.sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt));

    // Hide loading message (if present)
    const loadingMessage = document.getElementById("loadingMessage");
    if (loadingMessage) loadingMessage.style.display = "none";
    console.log("2");

    // Render each post
    data.posts.forEach(post => {
      postsContainer.appendChild(renderPost(post));
    });
    console.log("3");

    // Update skip count and manage the load more button
    skipCount += data.posts.length;
    manageLoadMoreButton(data.posts.length);
  } catch (error) {
    // Ignore abort errors; for other errors, log and display an error message
    if (error.name !== "AbortError") {
      console.error("Error fetching posts:", error);
      postsContainer.innerHTML = "<p>Failed to load posts. Please try again later.</p>";
    }
  } finally {
    isLoading = false;
    document.getElementById('loading-overlay').style.display = 'none';
  }
}


 
 </script>
</body>

</html>